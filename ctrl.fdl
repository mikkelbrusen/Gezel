dp xor(	in a, b : tc(32); 
		out r : ns(1)){
	always{
	r = (a != b);
	}
}

dp mux(
	in select :ns(1);
	in a, b	:tc(32);	
	out r	:tc(32))
{
	always{
		r = (select==0) ? a : b;
	}
}

dp muxalu  : mux
dp muxpc   : mux
dp muxmem  : mux

dp alu(
	in a, b		:tc(32);
	in sel 		:ns(2);	
	out r		:tc(32);
	out z	:ns(1))
{
	always{
		r = (sel==1) ? a + b :
			(sel==2) ? a - b : 
			(sel==3) ? a>>5 : 
					   b;
		z = (r == 0) ? 1 : 0;
	}
}

dp register(
	in asel, bsel, storesel	: ns(3);
	in storeenable 			: ns(1);	
	in storedata			: ns(32);
	out a,b 				: tc(32)
){
	reg m0,m1,m2,m3,m4,m5,m6,m7 : tc(32);
	always{
		a = (asel==0) ?	m0 : 
			(asel==1) ? m1 :
			(asel==2) ? m2 :
			(asel==3) ? m3 :
			(asel==4) ? m4 : 
			(asel==5) ? m5 :
			(asel==6) ? m6 : 
						m7;

		b = (bsel==0) ? m0 : 
			(bsel==1) ? m1 :
			(bsel==2) ? m2 :
			(bsel==3) ? m3 :
			(bsel==4) ? m4 : 
			(bsel==5) ? m5 :
			(bsel==6) ? m6 : 
						m7;

		m1 = (storeenable==1) ? (storesel==1) ? storedata : m1: m1 ;
		m2 = (storeenable==1) ? (storesel==2) ? storedata : m2: m2 ;
		m3 = (storeenable==1) ? (storesel==3) ? storedata : m3: m3 ;
		m4 = (storeenable==1) ? (storesel==4) ? storedata : m4: m4 ;
		m5 = (storeenable==1) ? (storesel==5) ? storedata : m5: m5 ;
		m6 = (storeenable==1) ? (storesel==6) ? storedata : m6: m6 ;
		m7 = (storeenable==1) ? (storesel==7) ? storedata : m7: m7 ;
	}
}

dp signExtend( 
	in a 	: tc(16);
	out r 	: tc(32))
{
	sig d : ns(1);
	sig b : tc(32);
	sig c : tc(32);

	always{
		b = 0;
		c = 4294901760;
		d = a[15];
		r = (d == 0) ? a :
						a | c ; 
	}
}

ipblock instmem(in address 	: ns(5);
				in wr,rd 	: ns(1);
				in idata 	: ns(32);
				out odata 	: ns(32)){
	iptype "ram";
	ipparm "size=64";
	ipparm "wl=32";
	ipparm "file=program.txt";
}

dp instmemFetch(
	in inst			: ns(32);
	out up			: ns(4);
	out ra,rb,rs 	: ns(3);
	out im 			: tc(16)
){
	always{
		im = inst[0:15];
		rs = inst[19:21];
		rb = inst[22:24];
		ra = inst[25:27];
		up = inst[28:31];
	}
}

dp control(	in up					: ns(4);
			out regwrite, muxalus	: ns(1);
			out aluop				: ns(4);
			out bzero, branch		: ns(1))
{
	always{
		regwrite = ((up == 0b0000) | (up == 0b0001) | (up == 0b0010) | (up == 0b0100) | (up == 0b0110) | (up == 0b1000)) ? 1 : 0;
		muxalus = ((up == 0b0000) | (up == 0b0011) | (up == 0b0101) | (up == 0b0110) | (up == 0b0111)) ? 1 : 0;
		aluop = up;
		bzero = (up == 0b0101);
		branch = (up == 0b0111);
	}
}

dp aluctr(	in aluop 	: ns(4);
			out alus 	: ns(2))
{
	always{
		alus = (aluop == 0b0010 | aluop == 0b0110) ? 1 : (aluop == 0b0001) ? 2 : (aluop == 0b1000) ? 3 : 0;
	}
}

dp and(	in a,b 	: ns(1); 
		out r 	: ns(1))
{
	always{
		r = a & b;
	}
}

dp or(	in a,b : ns(1); 
		out r : ns(1))
{
	always{
		r = a | b;
	}
}


dp PC(	in jump 		: ns(1);
		in target 		: ns(5);
		out pc_out 		: ns(5))
	{
	reg PCr	: ns(5);

	always{
		pc_out = (jump) ? target : PCr + 1;
		PCr = pc_out;
	}
}

dp CPU(){
	sig pc_out		 	: ns(5);
	sig inst 			: ns(32);
	sig regwrite 		: ns(1);
	sig alu_ope			: ns(4);
	sig storedata 		: ns(32);
	sig a, b, muxaluo	: tc(32);
	sig alus			: ns(2);
	reg zero			: ns(1);
	sig alu_out 		: tc(32);
	sig extendo 		: tc(32);
	sig muxalus 		: ns(1);
	sig jump, andout 	: ns(1);
	sig branch, bzero	: ns(1);

	use PC(jump, extendo[0:4],pc_out);
	use instmem(pc_out,0,1,0,inst);
	use control(inst[28:31],regwrite,muxalus,alu_ope,bzero,branch);
	use register(inst[25:27],inst[22:24],inst[19:21],regwrite,alu_out,a,b); //aluout should be storedata
	use aluctr(alu_ope,alus); 
	use alu(a,muxaluo,alus,alu_out,zero); // muxaluo instead of b
	use signExtend(inst[0:15],extendo);
	use and(zero, bzero, andout);
	use or(andout, branch, jump);
	use muxalu(muxalus,b,extendo,muxaluo);
	//use muxpc(jump,pc_out,extendo[0:4],pc_in);
	//use muxmem();


	always{
		//$display($dec, "Cycle:", $cycle);
		//$display($hex, "inst: ",inst, ", pc_out: ", pc_out);
		$display($dec, "pc_out: ", pc_out ,$bin, ", up=", inst[28:31], ", ra=", inst[25:27] ,
		", rb=", inst[22:24], ", rs=", inst[19:21], ", im=",inst[0:15]);
		$display($dec, "Alu=", alu_out, ", andout=", andout, ", jump=", jump, ", bzero=", bzero, ", zero=", zero);

		//im = inst[0:15];
		//rs = inst[19:21];
		//rb = inst[22:24];
		//ra = inst[25:27];
		//up = inst[28:31];
	}
}

system PCsystem{
	CPU;
}

